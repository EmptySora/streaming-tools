MainForm.cs
TODO:
  - Add in a AudioDeviceSelectDialog form (to select an audio device)
    - Make sure to interactively specify which type (OBS vs WASAPI) (hopefully without two to three forms)
    - Return should be ApplicationSettings.SettingsV0.AudioDeviceSettings
  - Add in a audio meter list showing all the audio meters being tested against. (maybe see if the NAudio.VolumeMeter control will work with me...)
    - Context menu that bitch up and allow modifying properties.
      - The item will open a form to edit and view the device properties.
    - Add in a checkbox to control if the source is captured to the servers.
    - Device settings window should clone the AudioDeviceSettings object and only replace it if the settings change.
      - Closing the window will save it (assuming DialogResult != Cancel (specify DefaultButton))
  - Settings form that allows configuring WebSocket servers and to start and stop servers.
    - Like above, clone settings and only save if DialogResult != Cancel
  - Actually finish the OBS capture
    - Add code to detect if the Audio Mixer is popped out. (if it is, our life is easy.
      - If not popped out display an error message.
  - Add in the Form1 as an audio device explorer. (remove a bunch of the older features.)
  - Help and About maybe implement with cefsharp? (or is this too heavy-handed...?)
  - Add in a way to specify the reason why the old settings file was removed (in the ApplicationSettings bs)
  - Need to look into IMMNotificationClient::OnDeviceStateChanged to handle hotplugging properly so the app doesn't crash.
  
  
  Controls:
    - A horizontally scrolling container containing individual controls
      - Each control takes an AUDIODEVICE as an argument and using NAudio.VolumeMeter to display the peaks.
      - If no audio devices are added, there's an alternate control explaining to "Click here to add an audio device"
      - Each device should individually have a context menu. 
      - The properties window for audio devices has two tabs: properties, options



The audio mixer window also has a vertical layout. We are not checking to see if it is vertical or not.

OBS Audio meters can have more than two bars. (eg: surround sound has 5-6). We only assume stereo is the max.

Maybe shift most of the sound code to a service container...? But service containers cannot access windows...